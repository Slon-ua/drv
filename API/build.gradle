plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
}

group 'com.driveroo'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    allureVersion = '2.14.0'
    junitVersion = '5.7.1'
    selenideVersion = '5.23.0'
    restAssuredVersion ='4.4.0'
    jacksonVersion = '2.13.0'
    slf4jVersion = '1.7.30'
    logbackVersion = '1.2.3'
}

sourceCompatibility = '8'
targetCompatibility = '8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation("com.codeborne:selenide:${selenideVersion}")
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}")
    testImplementation('org.assertj:assertj-core:3.20.2')
    testImplementation('org.hamcrest:hamcrest:2.2')
//    implementation("org.slf4j:slf4j-simple:${slf4jVersion}")

    implementation("org.slf4j:slf4j-api:${slf4jVersion}")// библиотека ' slf4j ' для того чтоб сделать красивые и самописные логи
    implementation("ch.qos.logback:logback-classic:${logbackVersion}")
    implementation("ch.qos.logback:logback-core:${logbackVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    implementation ("io.rest-assured:rest-assured:${restAssuredVersion}")

    implementation ("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")

    implementation 'org.aeonbits.owner:owner:1.0.12'

    implementation 'io.qameta.allure:allure-rest-assured:2.14.0'

}

test {
    useJUnitPlatform()

//    useJUnitPlatform{
//        includeTags "prod", "smoke"
//        excludeTags "smoke"
//    }

//    task slowTest(type: Test) {
//        useJUnitPlatform {
//            includeTags 'smoke'
//        }
//    }

//    excludeGroups << excludedGroups
//    includeGroups << includedGroups

    systemProperties System.getProperties()   //проброс комант, присвоение переменных из консоли в Gradle

    testLogging {
//        showStandardStreams = true //для отражения ответа RestAssured  https://blog.mrhaki.com/
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'  //более полный лог об ошибке
    }

    test.outputs.upToDateWhen {false} //строчка отвечает за то, что код будет запускатся всегда, даже при успешном прохождении. Тут же настраивается частота проведения тестов
}

allure {
    autoconfigure = true
    version = "${allureVersion}"
    aspectjweaver = true
    configuration = 'compile'  // указывает чтоб аллюр отрабатывал на уровне всего проекта

    useJUnit5 {
        version = "${allureVersion}"
    }
}